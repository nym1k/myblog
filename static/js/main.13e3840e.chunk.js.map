{"version":3,"sources":["components/Form/Form.module.css","components/UI/Header/Header.module.css","components/Posts/Post/Post.module.css","components/Posts/Posts.module.css","containers/Blog/Blog.module.css","hoc/Auxiliary/Auxiliary.js","components/UI/Header/Header.js","hoc/Layout/Layout.js","components/Form/Form.js","components/Posts/Post/Post.js","components/Posts/Posts.js","containers/Blog/Blog.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","aux","props","children","header","className","classes","Header","to","Layout","Content","this","Component","Form","state","postTitle","postBody","loading","formSubmitHandler","e","preventDefault","setState","post","title","body","author","dateCreated","Date","axios","then","res","catch","err","console","log","window","alert","action","type","FormInput","value","onChange","target","placeholder","rows","onClick","Post","Posts","posts","get","Object","values","data","error","map","key","Blog","path","exact","component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13e3840e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__3iLiv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__B_08R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Post\":\"Post_Post__qnXft\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Posts\":\"Posts_Posts__29hZC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Blog\":\"Blog_Blog__2AMOG\"};","const aux = (props) => props.children;\n\nexport default aux;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport classes from './Header.module.css';\r\n\r\nconst header = () => (\r\n  <header className={classes.Header}>\r\n    <nav>\r\n      <ul>\r\n        <li><Link to=\"/\">Home</Link></li>\r\n        <li><Link to=\"/new-post\">New Post</Link></li>\r\n      </ul>\r\n    </nav>\r\n  </header>\r\n)\r\n\r\nexport default header;","import React, { Component } from 'react';\r\n\r\nimport Aux from '../Auxiliary/Auxiliary';\r\nimport Header from '../../components/UI/Header/Header';\r\nimport classes from './Layout.module.css';\r\n\r\nclass Layout extends Component {\r\n  render () {\r\n    return (\r\n      <Aux>\r\n        <Header />\r\n        <main className={classes.Content}>\r\n          {this.props.children}\r\n        </main>\r\n      </Aux>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Layout;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport classes from './Form.module.css';\n\nclass Form extends Component {\n    state = {\n        postTitle: '',\n        postBody: '',\n        loading: false\n    }\n\n    formSubmitHandler = (e) => {\n        e.preventDefault();\n        if (this.state.postTitle !== '' && this.state.postBody !== '') {\n          this.setState({loading: true})\n          const post = {\n              title: this.state.postTitle,\n              body: this.state.postBody,\n              author: 'Ross King',\n              dateCreated: new Date()\n          }\n          axios.post('https://myblog-a0e46.firebaseio.com/posts.json', post)\n              .then(res => {\n                  this.setState({loading: false})\n              })\n              .catch(err => {\n                  console.log(err);\n                  this.setState({loading: false})\n              })\n        } else {\n          window.alert('Please enter some post content.')\n        }\n\n    }\n\n    render() {\n        return (\n            <div className={classes.Form}>\n                <h1>Create Post</h1>\n                <p>{this.state.postTitle}</p>\n                <p>{this.state.postBody}</p>\n                <form action=\"/\">\n                  <input\n                      type=\"text\"\n                      className={classes.FormInput}\n                      value={this.state.postTitle}\n                      onChange={(e) => { this.setState({postTitle: e.target.value}) }}\n                      placeholder=\"Post Title\"\n                      />\n                  <textarea\n                      className={classes.FormInput}\n                      value={this.state.postBody}\n                      onChange={(e) => { this.setState({postBody: e.target.value}) }}\n                      placeholder=\"Post Body\"\n                      rows=\"4\"\n                  />\n                  <input\n                      type=\"submit\"\n                      value=\"Submit\"\n                      onClick={this.formSubmitHandler}\n                  />\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Form;","import React from 'react';\nimport classes from './Post.module.css';\n\nconst post = (props) => {\n    return (\n      <div className={classes.Post}>\n        <h3>{props.post.title}</h3>\n        <p>{props.post.body}</p>\n      </div>\n    )\n}\n\nexport default post;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Post from './Post/Post';\nimport classes from './Posts.module.css';\n\nclass Posts extends Component {\n  state = {\n    posts: []\n  }\n\n  componentDidMount () {\n    axios.get('https://myblog-a0e46.firebaseio.com/posts.json')\n      .then(res => {\n        const posts = Object.values(res.data);\n        this.setState({ posts: posts })\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  }\n\n  render () {\n    return (\n      <div className={classes.Posts}>\n        <h1>Latest Posts</h1>\n        <ul>\n          {this.state.posts !== '' ? this.state.posts.map(post => (\n            <li key={post.dateCreated}>\n              <Post post={post} />\n            </li>\n          ))\n          : null}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default Posts;","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport Form from '../../components/Form/Form';\nimport Posts from '../../components/Posts/Posts';\nimport classes from './Blog.module.css';\n\nclass Blog extends Component {\n    render () {\n        return (\n            <div className={classes.Blog}>\n                <Route path=\"/\" exact component={Posts} />\n                <Route path=\"/new-post\" component={Form} />\n            </div>\n        )\n    }\n}\n\nexport default Blog;","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Layout from './hoc/Layout/Layout';\nimport Blog from './containers/Blog/Blog';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Layout>\n          <Blog />\n        </Layout>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}